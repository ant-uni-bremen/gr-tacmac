/*
 * Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(mac_controller.h)                                          */
/* BINDTOOL_HEADER_FILE_HASH(be7f4f76cfdfa6ea0fcbeba06e9a0795)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/numpy.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <tacmac/mac_controller.h>
// pydoc.h is automatically generated in the build directory
#include <mac_controller_pydoc.h>

// template <typename Sequence>
// inline py::array_t<typename Sequence::value_type> as_pyarray(Sequence&& seq)
// {
//     auto size = seq.size();
//     auto data = seq.data();
//     std::unique_ptr<Sequence> seq_ptr = std::make_unique<Sequence>(std::move(seq));
//     auto capsule = py::capsule(seq_ptr.get(), [](void* p) {
//         std::unique_ptr<Sequence>(reinterpret_cast<Sequence*>(p));
//     });
//     seq_ptr.release();
//     return py::array(size, data, capsule);
// }

// // Adapted from: https://github.com/pybind/pybind11/issues/1042#issuecomment-663154709
// template <class T>
// inline std::vector<T> as_cppvector(const py::array_t<T>& passthrough)
// {
//     py::buffer_info passthroughBuf = passthrough.request();
//     if (passthroughBuf.ndim != 1) {
//         throw std::runtime_error("Error. Number of dimensions must be one");
//     }
//     size_t length = passthroughBuf.shape[0];
//     T* passthroughPtr = static_cast<T*>(passthroughBuf.ptr);
//     std::vector<T> passthroughSpan(passthroughPtr, passthroughPtr + length);
//     return passthroughSpan;
// }

void bind_mac_controller(py::module& m)
{
    m.def("calculate_checksum", &gr::tacmac::calculate_checksum);
    m.def("parse_payload", &gr::tacmac::parse_payload);

    using mac_controller = ::gr::tacmac::mac_controller;

    py::class_<mac_controller,
               gr::sync_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<mac_controller>>(m, "mac_controller", D(mac_controller))

        .def(py::init(&mac_controller::make),
             py::arg("destination_id"),
             py::arg("source_id"),
             py::arg("mtu_size"),
             D(mac_controller, make))

        .def("replay_mode", &mac_controller::replay_mode)
        .def("activate_replay_mode",
             &mac_controller::activate_replay_mode //,
                                                   //    py::arg("activate") //,
             //    D(mac_controller, activate_replay_mode)
        )

        ;
}
