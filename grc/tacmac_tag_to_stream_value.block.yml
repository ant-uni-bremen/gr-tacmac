id: tacmac_tag_to_stream_value
label: Tag2Stream value
category: '[tacmac]'

templates:
  imports: import tacmac
  make: tacmac.tag_to_stream_value_${type.fcn}(${intype.size}*${vlen}, ${tag_key}, ${dict_key})

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as \$keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
parameters:
- id: tag_key
  label: Tag key
  dtype: string
- id: dict_key
  label: Dict key
  dtype: string
-   id: type
    label: Output Type
    dtype: enum
    options: [complex, float, int]
    option_attributes:
        vconst_type: [complex_vector, real_vector, int_vector]
        const_type:  [complex, real, int]
        fcn: [cc, cf, ci]
-   id: intype
    label: Input Type
    dtype: enum
    options: [complex, float, int, short, byte]
    option_attributes:
        size: [gr.sizeof_gr_complex, gr.sizeof_float, gr.sizeof_int, gr.sizeof_short,
            gr.sizeof_char]
    hide: part
-   id: vlen
    label: Vec Length
    dtype: int
    default: '1'
    hide: ${ 'part' if vlen == 1 else 'none' }
#- id: is_dict
#  label: is Dictionary
#  dtype: bool

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
- label: in
  domain: stream
  dtype: ${ intype }
  vlen: ${ vlen }

outputs:
- label: out
  domain: stream
  dtype: ${ type }

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
